// Investment Calculator Application Pseudocode
// Object-Oriented Design with Input Validation and Compound Interest Calculations

// ==================== CLASS DEFINITIONS ====================

CLASS Investment:
    // Private attributes
    PRIVATE initialInvestment AS DECIMAL
    PRIVATE monthlyDeposit AS DECIMAL
    PRIVATE annualInterestRate AS DECIMAL
    PRIVATE numberOfYears AS INTEGER
    PRIVATE monthlyInterestRate AS DECIMAL
    PRIVATE totalMonths AS INTEGER
    
    // Constructor
    CONSTRUCTOR Investment(initial, monthly, rate, years):
        SET initialInvestment = initial
        SET monthlyDeposit = monthly
        SET annualInterestRate = rate
        SET numberOfYears = years
        SET monthlyInterestRate = rate / 12 / 100
        SET totalMonths = years * 12
    END CONSTRUCTOR
    
    // Getters
    METHOD getInitialInvestment():
        RETURN initialInvestment
    END METHOD
    
    METHOD getMonthlyDeposit():
        RETURN monthlyDeposit
    END METHOD
    
    METHOD getAnnualInterestRate():
        RETURN annualInterestRate
    END METHOD
    
    METHOD getNumberOfYears():
        RETURN numberOfYears
    END METHOD
    
    // Calculate compound interest without monthly deposits
    METHOD calculateWithoutDeposits():
        DECLARE balanceArray AS ARRAY OF DECIMAL[numberOfYears + 1]
        DECLARE interestEarnedArray AS ARRAY OF DECIMAL[numberOfYears + 1]
        
        SET balanceArray[0] = initialInvestment
        SET interestEarnedArray[0] = 0
        
        FOR year = 1 TO numberOfYears:
            SET previousBalance = balanceArray[year - 1]
            SET yearlyInterest = previousBalance * (annualInterestRate / 100)
            SET balanceArray[year] = previousBalance + yearlyInterest
            SET interestEarnedArray[year] = yearlyInterest
        END FOR
        
        RETURN (balanceArray, interestEarnedArray)
    END METHOD
    
    // Calculate compound interest with monthly deposits
    METHOD calculateWithDeposits():
        DECLARE balanceArray AS ARRAY OF DECIMAL[numberOfYears + 1]
        DECLARE interestEarnedArray AS ARRAY OF DECIMAL[numberOfYears + 1]
        
        SET balanceArray[0] = initialInvestment
        SET interestEarnedArray[0] = 0
        SET currentBalance = initialInvestment
        
        FOR year = 1 TO numberOfYears:
            SET yearStartBalance = currentBalance
            SET totalYearlyInterest = 0
            
            FOR month = 1 TO 12:
                // Add monthly interest
                SET monthlyInterest = currentBalance * monthlyInterestRate
                SET currentBalance = currentBalance + monthlyInterest
                SET totalYearlyInterest = totalYearlyInterest + monthlyInterest
                
                // Add monthly deposit at end of month
                SET currentBalance = currentBalance + monthlyDeposit
            END FOR
            
            SET balanceArray[year] = currentBalance
            SET interestEarnedArray[year] = totalYearlyInterest
        END FOR
        
        RETURN (balanceArray, interestEarnedArray)
    END METHOD
    
    // Display investment summary
    METHOD displaySummary():
        PRINT "=== INVESTMENT SUMMARY ==="
        PRINT "Initial Investment: $" + FORMAT(initialInvestment, "0.00")
        PRINT "Monthly Deposit: $" + FORMAT(monthlyDeposit, "0.00")
        PRINT "Annual Interest Rate: " + FORMAT(annualInterestRate, "0.00") + "%"
        PRINT "Investment Period: " + numberOfYears + " years"
        PRINT ""
    END METHOD
    
END CLASS

// ==================== INPUT VALIDATION CLASS ====================

CLASS InputValidator:
    // Validate initial investment
    METHOD validateInitialInvestment(input AS STRING):
        TRY:
            SET value = CONVERT_TO_DECIMAL(input)
            IF value < 0:
                THROW "Initial investment must be positive"
            END IF
            IF value > 10000000:
                THROW "Initial investment exceeds reasonable limit ($10,000,000)"
            END IF
            RETURN value
        CATCH exception:
            THROW "Invalid initial investment: " + exception.message
        END TRY
    END METHOD
    
    // Validate monthly deposit
    METHOD validateMonthlyDeposit(input AS STRING):
        TRY:
            SET value = CONVERT_TO_DECIMAL(input)
            IF value < 0:
                THROW "Monthly deposit must be positive or zero"
            END IF
            IF value > 100000:
                THROW "Monthly deposit exceeds reasonable limit ($100,000)"
            END IF
            RETURN value
        CATCH exception:
            THROW "Invalid monthly deposit: " + exception.message
        END TRY
    END METHOD
    
    // Validate annual interest rate
    METHOD validateInterestRate(input AS STRING):
        TRY:
            SET value = CONVERT_TO_DECIMAL(input)
            IF value < 0:
                THROW "Interest rate must be positive"
            END IF
            IF value > 50:
                THROW "Interest rate exceeds reasonable limit (50%)"
            END IF
            RETURN value
        CATCH exception:
            THROW "Invalid interest rate: " + exception.message
        END TRY
    END METHOD
    
    // Validate number of years
    METHOD validateYears(input AS STRING):
        TRY:
            SET value = CONVERT_TO_INTEGER(input)
            IF value <= 0:
                THROW "Number of years must be positive"
            END IF
            IF value > 100:
                THROW "Number of years exceeds reasonable limit (100)"
            END IF
            RETURN value
        CATCH exception:
            THROW "Invalid number of years: " + exception.message
        END TRY
    END METHOD
    
END CLASS

// ==================== DISPLAY FORMATTER CLASS ====================

CLASS DisplayFormatter:
    // Display formatted table
    METHOD displayTable(title AS STRING, balanceArray AS ARRAY, interestArray AS ARRAY, years AS INTEGER):
        PRINT ""
        PRINT "=== " + title + " ==="
        PRINT "+" + REPEAT("-", 60) + "+"
        PRINT "| Year |    Balance    | Interest Earned | Total Interest |"
        PRINT "+" + REPEAT("-", 60) + "+"
        
        SET totalInterest = 0
        FOR year = 0 TO years:
            SET totalInterest = totalInterest + interestArray[year]
            PRINT "| " + FORMAT(year, "4") + " | $" + FORMAT(balanceArray[year], "10.2f") + 
                  " | $" + FORMAT(interestArray[year], "13.2f") + " | $" + FORMAT(totalInterest, "12.2f") + " |"
        END FOR
        
        PRINT "+" + REPEAT("-", 60) + "+"
        PRINT ""
    END METHOD
    
    // Display comparison summary
    METHOD displayComparison(withoutDeposits AS Investment, withDeposits AS Investment, years AS INTEGER):
        SET (balancesWithout, interestWithout) = withoutDeposits.calculateWithoutDeposits()
        SET (balancesWith, interestWith) = withDeposits.calculateWithDeposits()
        
        SET finalWithout = balancesWithout[years]
        SET finalWith = balancesWith[years]
        SET difference = finalWith - finalWithout
        
        PRINT "=== COMPARISON SUMMARY ==="
        PRINT "Final balance without monthly deposits: $" + FORMAT(finalWithout, "0.00")
        PRINT "Final balance with monthly deposits: $" + FORMAT(finalWith, "0.00")
        PRINT "Difference: $" + FORMAT(difference, "0.00")
        PRINT "Additional growth: " + FORMAT((difference / finalWithout) * 100, "0.2f") + "%"
        PRINT ""
    END METHOD
    
END CLASS

// ==================== MAIN PROGRAM ====================

PROGRAM InvestmentCalculator:
    DECLARE validator AS InputValidator
    DECLARE formatter AS DisplayFormatter
    DECLARE initialInvestment, monthlyDeposit, interestRate AS DECIMAL
    DECLARE years AS INTEGER
    DECLARE continueProgram AS BOOLEAN = TRUE
    
    WHILE continueProgram:
        TRY:
            PRINT "=== INVESTMENT CALCULATOR ==="
            PRINT ""
            
            // Get and validate initial investment
            REPEAT:
                SET validInput = FALSE
                TRY:
                    PRINT "Enter initial investment amount: $"
                    INPUT initialInvestmentInput
                    SET initialInvestment = validator.validateInitialInvestment(initialInvestmentInput)
                    SET validInput = TRUE
                CATCH validationError:
                    PRINT "Error: " + validationError.message
                    PRINT "Please try again."
                END TRY
            UNTIL validInput
            
            // Get and validate monthly deposit
            REPEAT:
                SET validInput = FALSE
                TRY:
                    PRINT "Enter monthly deposit amount: $"
                    INPUT monthlyDepositInput
                    SET monthlyDeposit = validator.validateMonthlyDeposit(monthlyDepositInput)
                    SET validInput = TRUE
                CATCH validationError:
                    PRINT "Error: " + validationError.message
                    PRINT "Please try again."
                END TRY
            UNTIL validInput
            
            // Get and validate annual interest rate
            REPEAT:
                SET validInput = FALSE
                TRY:
                    PRINT "Enter annual interest rate (%): "
                    INPUT interestRateInput
                    SET interestRate = validator.validateInterestRate(interestRateInput)
                    SET validInput = TRUE
                CATCH validationError:
                    PRINT "Error: " + validationError.message
                    PRINT "Please try again."
                END TRY
            UNTIL validInput
            
            // Get and validate number of years
            REPEAT:
                SET validInput = FALSE
                TRY:
                    PRINT "Enter number of years: "
                    INPUT yearsInput
                    SET years = validator.validateYears(yearsInput)
                    SET validInput = TRUE
                CATCH validationError:
                    PRINT "Error: " + validationError.message
                    PRINT "Please try again."
                END TRY
            UNTIL validInput
            
            // Create investment objects
            SET investmentWithoutDeposits = NEW Investment(initialInvestment, 0, interestRate, years)
            SET investmentWithDeposits = NEW Investment(initialInvestment, monthlyDeposit, interestRate, years)
            
            // Display investment summary
            investmentWithDeposits.displaySummary()
            
            // Calculate and display results without monthly deposits
            SET (balancesWithout, interestWithout) = investmentWithoutDeposits.calculateWithoutDeposits()
            formatter.displayTable("GROWTH WITHOUT MONTHLY DEPOSITS", balancesWithout, interestWithout, years)
            
            // Calculate and display results with monthly deposits
            IF monthlyDeposit > 0:
                SET (balancesWith, interestWith) = investmentWithDeposits.calculateWithDeposits()
                formatter.displayTable("GROWTH WITH MONTHLY DEPOSITS", balancesWith, interestWith, years)
                
                // Display comparison
                formatter.displayComparison(investmentWithoutDeposits, investmentWithDeposits, years)
            END IF
            
            // Ask user if they want to continue
            PRINT "Would you like to run another calculation? (y/n): "
            INPUT continueChoice
            SET continueProgram = (continueChoice.toLowerCase() = "y" OR continueChoice.toLowerCase() = "yes")
            
        CATCH unexpectedError:
            PRINT "An unexpected error occurred: " + unexpectedError.message
            PRINT "Please restart the application."
            SET continueProgram = FALSE
        END TRY
    END WHILE
    
    PRINT "Thank you for using the Investment Calculator!"
    
END PROGRAM

// ==================== ALGORITHM NOTES ====================

/*
COMPOUND INTEREST FORMULAS USED:

1. Without monthly deposits:
   A = P(1 + r)^t
   Where: A = final amount, P = principal, r = annual rate, t = time in years

2. With monthly deposits:
   Monthly calculation approach:
   - Apply monthly interest: balance = balance * (1 + monthly_rate)
   - Add monthly deposit: balance = balance + monthly_deposit
   - Repeat for each month

KEY VALIDATION RANGES:
- Initial Investment: $0 to $10,000,000
- Monthly Deposit: $0 to $100,000
- Interest Rate: 0% to 50%
- Years: 1 to 100

ERROR HANDLING:
- Input validation for each field
- Range checking for reasonable limits
- Type conversion error handling
- Graceful error recovery with retry prompts
*/
